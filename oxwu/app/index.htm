<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="./css/style.css">
<style type="text/css">
#container{
	background:linear-gradient(to bottom, #8BC5F5 0%, #4C7CA3 100%);
	position:relative;
}

#towns {
    fill: #F4F9FF;
    stroke: #bbbbbb;
    stroke-linejoin: round;
}

#counties {
    fill: none;
    stroke: #111111;
    stroke-linejoin: round;
}

#map{
	filter: drop-shadow( 0px 0px 5px #333 );
}

.i7 {
    fill: #8F3554;/*For SVG*/
	background-color:#8F3554;/*For Legend*/
}

.i6 {
    fill: #DA2D21/*#FE5347*/;
	background-color:#DA2D21;
}

.i5 {
    fill: #FF6523;
	background-color:#FF6523;
}

.i4 {
    fill: #FFA839;
	background-color:#FFA839;
}

.i3 {
    fill: #FFD32B;
	background-color:#FFD32B;
}

.i2 {
    fill: #FFFF00;
	background-color:#FFFF00;
}

.i1 {
    fill: #A9FE13;
	background-color:#A9FE13;
}

.i0 {
    fill: #F4F9FF;
	background-color:#F4F9FF;
}

.circle {
  fill: none;
}

.circle.a {
  stroke: #f00;
}

.circle.b {
  stroke: #00a2f3;
}

#intensity-legend{
	position:absolute;
	bottom:10px;
	left:10px;
	background-color:rgba(0,0,0,0.3);
	border-radius:5px;
	padding:5px;
	color:#FFF;
	font-size:11px;
	text-shadow: 1px 1px #000;
}

#intensity-legend .color{
	display:inline-block;
	vertical-align:middle;
	height:15px;
	width:15px;
}

#intensity-legend .text{
	display:inline-block;
	vertical-align:middle;
	padding-left:3px;
}

#information{
	position:absolute;
	right:0;
	top:0;
	height:100%;
	width:280px;
    border-left: 2px solid #373737;
/*
	background: linear-gradient(to bottom, #ebebeb 0%,#c7c7c7 100%);
*/
	background-color:#ebebeb;
	box-shadow: 0 0 24px rgba(0, 0, 0, 0.4);
}

#information .wrapper{
	padding: 10px;
}

#information .title{
	position:relative;
	font-size:24px;
	font-weight:bold;
	text-align:center;
	color:#373737;
	text-shadow: 1px 1px #FFF;
    border-bottom: 1px solid #cacaca;
	box-shadow: 0 1px 0 #FFF;
	padding-bottom:10px;
	margin-bottom:10px;
}

#epicenter-table{
	display:table;
	width:100%;
	color:#373737;
	padding-bottom:10px;
    border-bottom: 1px solid #cacaca;
	box-shadow: 0 1px 0 #FFF;
}

#epicenter-table .row{
	display:table-row;
}

#epicenter-table .header{
	display:table-cell;
	vertical-align:top;
	padding:3px 10px;
	text-align:left;
	width:50px;
	font-weight:bold;
	white-space:nowrap;
}

#epicenter-table .content{
	display:table-cell;
	vertical-align:middle;
	padding:3px 5px;
}

#location-table{
    border-bottom: 1px solid #cacaca;
	box-shadow: 0 1px 0 #FFF;
}

.location-table{
	position:relative;
	color:#373737;
}

.location-table .header{
	padding:3px 5px;
	text-align:center;
	font-weight:bold;
}

.location-table .content{
	text-align:center;
	font-size:75px;
}

.location-table .unit{
	position:absolute;
	bottom:-5px;
	right:5px;
}

.test-button-container{
	position:absolute;
	bottom:0;
	width:100%;
	padding:10px;
	box-sizing:border-box;
}

/* Light */
#connection-light {
	display: inline-block;
	border-radius: 100%;
	box-shadow: inset 0px 1px 1px rgba(255, 255, 255, 0.5), 0px 1px 2px rgba(0, 0, 0, 0.2);
	width: 24px;
	height: 24px;
	border-width: 1px;
	border-style: solid;
	box-sizing: border-box;
	position:absolute;
	left:3px;
	top:1px;
/*
	-webkit-app-region: no-drag;
*/
}

#connection-light.green {
  background: linear-gradient(to bottom, #8fcf00 0%,#6b9c00 100%);
  border-color: #5a8200;
}

#connection-light.red {
  background: linear-gradient(to bottom, #e8543f 0%,#d9331a 100%);
  border-color: #c22d18;
}

#connection-light.gray {
	background: linear-gradient(to bottom, #d0d0d0 0%,#8e8e8e 100%);
  	border-color: #757575;
}

/* Connection Status */
#connection-information {
    line-height: 120%;
    font-size: 16px;
    color: #000;
    border-radius: 2px;
    background: linear-gradient(to bottom, rgba(254,239,175,1) 0%,rgba(239,208,78,1) 100%);
	filter:
		drop-shadow(0px 1px 0px rgba(85,85,85,1))
		drop-shadow(0px -1px 0px rgba(85,85,85,1))
		drop-shadow(1px 0px 0px rgba(85,85,85,1))
		drop-shadow(-1px 0px 0px rgba(85,85,85,1))
		drop-shadow(0px 0px 3px rgba(0,0,0,0.4));
	z-index:999;
	position:absolute;
	top:38px;
	left:1px;
}

#connection-information .item{
	padding:8px 10px;
}

#connection-information .arrow{
	background-repeat:no-repeat;
	display: block;
	position:absolute;
	background-image:url(./image/icons_arrow.png);
	width:13px;
	height:7px;
	background-position:0px 0px;
	top:-7px;
	left:8px;
}

/* Button */
#test-button{
	border-radius: 0;
	color: #FFFFFF;
	border-radius: 3px;
	cursor: pointer;
	border: 1px solid #a00006;
	background-color: #b90004;
	background-image: linear-gradient(to bottom, #b90004, #ad0007);
	text-shadow: none;
	width:100%;
	padding:10px 0;
	font-size:24px;
	font-weight:bold;
}

#test-button:hover{
	border: 1px solid #810300;
	background-color: #a00005;
	background-image: linear-gradient(to bottom, #b90004, #a00005);
}

#test-button:active{
	box-shadow: inset 1px 1px 5px rgba(0, 0, 0, 0.2);
	color:transparent;
	text-shadow: 1px 1px rgba(255, 255, 255, 1);
}

#test-button:focus{
	outline:0;
}
</style>
<script src="./js/jquery.min.js"></script>
<script language="JavaScript">
window.$ = window.jQuery = require('./js/jquery.min.js');
const electron = require('electron');
const remote = electron.remote;
const app = remote.app
const ipcRenderer = electron.ipcRenderer;
//console.log(ipcRenderer.sendSync('synchronous-message', 'ping')); // prints "pong"
</script>
<script src="./js/d3.v3.min.js"></script>
<script src="./js/topojson.v2.min.js"></script>
<script src="./js/map.js"></script>
<script src="./js/town_info.js"></script>
<script language="JavaScript">
var warning = false;
var drawWaveThread = null;
var countdownThread = null;

var connectionStatus = false;
var initCountdownThread = null;

//this function generates the points for the path. If a projection is specified, it will
//automatically convert them to it. If not, it returns lat/lon positions.
//from http://stackoverflow.com/questions/20130186/d3-geo-buffer-around-a-feature with modifications
function circlePath(lat, lon, radius, projection) {
    var intervals = 72;
    var intervalAngle = (360 / intervals);

    var pointsData = [];
    for (var i = 0; i < intervals; i++) {
        pointsData.push(getDestinationPoint(lat, lon, i * intervalAngle, radius));
    }

    if (projection) {
        pointsData2 = [];
        for (i in pointsData) {
            pointsData2.push([projection([pointsData[i][1], pointsData[i][0]])[0], projection([pointsData[i][1], pointsData[i][0]])[1]]);
        }
        return pointsData2;
    }
	else {
        return pointsData;
    }
}

//function to get destination points given an initial lat/lon, bearing, distance
//from http://www.movable-type.co.uk/scripts/latlong.html
function getDestinationPoint(lat, lon, brng, d) {
    var R = 6371e3; //earth's radius in metres �X change to whatever unit you plan on using (e.g. miles = 3959) 
    var deg2rad = Math.PI / 180;
    var rad2deg = 180 / Math.PI;

    brng *= deg2rad;
    lat *= deg2rad;
    lon *= deg2rad;

    var lat2 = Math.asin(Math.sin(lat) * Math.cos(d / R) + Math.cos(lat) * Math.sin(d / R) * Math.cos(brng));
    var lon2 = lon + Math.atan2(Math.sin(brng) * Math.sin(d / R) * Math.cos(lat), Math.cos(d / R) - Math.sin(lat) * Math.sin(lat2));

    return [lat2 * rad2deg, lon2 * rad2deg];
}

function getDistance(lat1, lon1, lat2, lon2){
	var R = 6371e3; // metres
    var deg2rad = Math.PI / 180;

	lat1 *= deg2rad;
	lon1 *= deg2rad;
	lat2 *= deg2rad;
	lon2 *= deg2rad;

	var a = Math.sin((lat2 - lat1) / 2) * Math.sin((lat2 - lat1) / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin((lon2 - lon1) / 2) * Math.sin((lon2 - lon1) / 2);
	var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

	return R * c;
}

function drawEpicenter(epicenterLat, epicenterLon){
	var epicenter = d3.select("#epicenter");

	epicenter.selectAll("*")
		.remove();

	var coordinates = projection([epicenterLon, epicenterLat]);

	epicenter.append('line')
		.attr('x1', coordinates[0] - 7.5)
		.attr('y1', coordinates[1] - 7.5)
		.attr('x2', coordinates[0] + 7.5)
		.attr('y2', coordinates[1] + 7.5)
		.attr("stroke", "#FFF")
		.attr("stroke-width", 10.5)
		.attr("stroke-linecap", "round");

	epicenter.append('line')
		.attr('x1', coordinates[0] - 7.5)
		.attr('y1', coordinates[1] + 7.5)
		.attr('x2', coordinates[0] + 7.5)
		.attr('y2', coordinates[1] - 7.5)
		.attr("stroke", "#FFF")
		.attr("stroke-width", 10.5)
		.attr("stroke-linecap", "round");

	epicenter.append('line')
		.attr('x1', coordinates[0] - 7.5)
		.attr('y1', coordinates[1] - 7.5)
		.attr('x2', coordinates[0] + 7.5)
		.attr('y2', coordinates[1] + 7.5)
		.attr("stroke", "red")
		.attr("stroke-width", 7.5)
		.attr("stroke-linecap", "round");

	epicenter.append('line')
		.attr('x1', coordinates[0] - 7.5)
		.attr('y1', coordinates[1] + 7.5)
		.attr('x2', coordinates[0] + 7.5)
		.attr('y2', coordinates[1] - 7.5)
		.attr("stroke", "red")
		.attr("stroke-width", 7.5)
		.attr("stroke-linecap", "round");
}

function drawLocation(epicenterLat, epicenterLon){
	var location = d3.select("#location");

	location.selectAll("*")
		.remove();

	var coordinates = projection([epicenterLon, epicenterLat]);
	var x = Math.round(coordinates[0]);
	var y = Math.round(coordinates[1]);

	location.append('line')
		.attr('x1', x - 15.5)
		.attr('y1', y)
		.attr('x2', x + 15.5)
		.attr('y2', y)
		.attr("stroke", "#FFF")
		.attr("stroke-width", 6.5)
		.attr("stroke-linecap", "butt");

	location.append('line')
		.attr('x1', x)
		.attr('y1', y - 15.5)
		.attr('x2', x)
		.attr('y2', y + 15.5)
		.attr("stroke", "#FFF")
		.attr("stroke-width", 6.5)
		.attr("stroke-linecap", "butt");

	location.append('circle')
		.attr('cx', x)
		.attr('cy', y)
		.attr('r', 12.5)
		.attr("fill", "#FFF")
		.attr("stroke-width", 0);

	location.append('line')
		.attr('x1', x - 14)
		.attr('y1', y)
		.attr('x2', x + 14)
		.attr('y2', y)
		.attr("stroke", "red")
		.attr("stroke-width", 4)
		.attr("stroke-linecap", "butt");

	location.append('line')
		.attr('x1', x)
		.attr('y1', y - 14)
		.attr('x2', x)
		.attr('y2', y + 14)
		.attr("stroke", "red")
		.attr("stroke-width", 4)
		.attr("stroke-linecap", "butt");

	location.append('circle')
		.attr('cx', x)
		.attr('cy', y)
		.attr('r', 11)
		.attr("fill", "red")
		.attr("stroke-width", 0);

	location.append('circle')
		.attr('cx', x)
		.attr('cy', y)
		.attr('r', 8)
		.attr("fill", "white")
		.attr("stroke-width", 0);

	location.append('circle')
		.attr('cx', x)
		.attr('cy', y)
		.attr('r', 6)
		.attr("fill", "red")
		.attr("stroke-width", 0);
}

function drawWave(epicenterLat, epicenterLon, epicenterDepth, originTime, maxDistance, showPWave){
	var nowTime = new Date(now());
	var pWave = d3.select("#pWave");
	var sWave = d3.select("#sWave");

	// pwave
	if(showPWave){
		var pWaveRadius = Math.abs(Math.sqrt(Math.pow(6500 * ((nowTime - originTime) / 1000), 2) - Math.pow(epicenterDepth, 2))) || 0;

		if(pWaveRadius > 0){
			pWave.selectAll("*")
				.remove();

			var path = circlePath(epicenterLat, epicenterLon, pWaveRadius, projection).join("L");

			pWave.append("path")
			    .attr("d", "M" + path + "Z")
			    .attr("fill", "none")
			    .attr("stroke", "white")
			    .attr("stroke-width", 5.5);

			pWave.append("path")
			    .attr("d", "M" + path + "Z")
			    .attr("fill", "none")
			    .attr("stroke", "#F5B03B")
			    .attr("stroke-width", 2.5);
		}
	}
	else{
		pWave.selectAll("*")
			.remove();
	}

	// swave
	var sWaveRadius = Math.abs(Math.sqrt(Math.pow(3500 * ((nowTime - originTime) / 1000), 2) - Math.pow(epicenterDepth, 2))) || 0;
	if(sWaveRadius > 0){
		sWave.selectAll("*")
			.remove();

		var path = circlePath(epicenterLat, epicenterLon, sWaveRadius, projection).join("L");

		sWave.append("path")
		    .attr("d", "M" + path + "Z")
		    .attr("fill", "none")
		    .attr("stroke", "white")
		    .attr("stroke-width", 5.5);

		sWave.append("path")
		    .attr("d", "M" + path + "Z")
		    .attr("fill", "none")
		    .attr("stroke", "red")
		    .attr("stroke-width", 2.5);
	}

	if(sWaveRadius < maxDistance){
		drawWaveThread = setTimeout(function(){
			drawWave(epicenterLat, epicenterLon, epicenterDepth, originTime, maxDistance, showPWave);
		}, 500);
	}
	else{
		drawWaveThread = null;
		warning = false;
		remote.getCurrentWindow().setAlwaysOnTop(false);

		pWave.selectAll("*")
			.remove();

		sWave.selectAll("*")
			.remove();
	}
};

function countdown(epicenterLat, epicenterLon, epicenterDepth, originTime, locationLat, locationLon, alert){
	var distance = Math.abs(Math.sqrt(Math.pow(getDistance(epicenterLat, epicenterLon, locationLat, locationLon), 2) + Math.pow(epicenterDepth, 2))) || 0;
	var etaPlaying = null;

	var run = function(){
		var eta = Math.ceil((distance - (3500 * (new Date(now()) - originTime) / 1000)) / 3500);
		$("#eta").text(eta < 0 ? 0 : eta);

		// Play voice
		if(alert == true && $("#audio-player-container").attr("playing") != "true"){
			if(etaPlaying != null && eta != etaPlaying){
				if(eta < 300 && eta % 5 == 0 && eta > 5){
					var temp = eta;
					var playBuffer = [];

					try{
						if(temp >= 100){
							playBuffer.push(Math.floor(temp / 100) + "xx");

							if(temp % 100 == 0){
								throw "";
							}

							if(Math.floor(temp / 10) % 10 == 0){
								playBuffer.push("0");
							}
							else if(Math.floor(temp / 10) % 10 == 1){
								playBuffer.push("1");
							}

							temp %= 100;
						}

						if(temp <= 9){// 0 ~ 9
							playBuffer.push(temp);
						}
						else if(temp >= 10 && temp <= 19){// 10 ~ 19
							playBuffer.push("x" + (temp % 10));
						}
						else if(temp >= 20 && temp <= 99){// 20 ~ 99
							playBuffer.push(Math.floor(temp / 10) + "x");
							playBuffer.push("x" + (temp % 10));
						}
					}
					catch(error){}

					playBuffer.push("second");
					playVoiceSound(playBuffer);
				}
				else if(eta <= 5 && eta > 0){
					playVoiceSound([eta]);
				}
				else if(eta == 0){
					playVoiceSound(["arrive"]);
				}
			}

			etaPlaying = eta;
		}

		if(eta > 0){
			countdownThread = setTimeout(run, 100);
		}
		else{
			countdownThread = null;
		}
	};

	run();
}

function getIntensity(epicenterLat, epicenterLon, epicenterDepth, locationLat, locationLon, magnitude, siteEffect){
	var distance = Math.sqrt(Math.pow(getDistance(epicenterLat, epicenterLon, locationLat, locationLon), 2) + Math.pow(epicenterDepth, 2));// The distance between hypocenter and user location in meter
	var pga = 1.657 * Math.pow(Math.E, 1.533 * magnitude) * Math.pow(distance / 1000, -1.607) * siteEffect;

	if(pga < 0.8){
		return 0;
	}
	else if(pga >= 0.8 && pga < 2.5){
		return 1;
	}
	else if(pga >= 2.5 && pga < 8){
		return 2;
	}
	else if(pga >= 8 && pga < 25){
		return 3;
	}
	else if(pga >= 25 && pga < 80){
		return 4;
	}
	else if(pga >= 80 && pga < 250){
		return 5;
	}
	else if(pga >= 250 && pga < 400){
		return 5;
	}
	else if(pga >= 400){
		return 6;
	}
}

function fillIntensity(epicenterLat, epicenterLon, epicenterDepth, magnitude){
	var maxDistance = 0;
	var maxIntensity = 0;
	var userTownIntensity = 0;

	for(var county in taiwan){
		for(var town in taiwan[county]){
			var intensity = getIntensity(epicenterLat, epicenterLon, epicenterDepth, taiwan[county][town][1], taiwan[county][town][2], magnitude, settings.applySiteEffect ? taiwan[county][town][3] || 1 : 1);
			if(intensity > maxIntensity){
				maxIntensity = intensity;
			}

			if(taiwan[county][town][0] == userTownID){
				userTownIntensity = intensity;
			}

			d3.select("#s" + taiwan[county][town][0])
				.attr("class", "i" + intensity);

			var distance = getDistance(epicenterLat, epicenterLon, taiwan[county][town][1], taiwan[county][town][2]);
			if(distance > maxDistance){
				maxDistance = distance;
			}
		}
	}

	return {
		"maxDistance": maxDistance,
		"maxIntensity": maxIntensity,
		"userTownIntensity": userTownIntensity
	};
}

function updateUserLocation(){
	userTownID = settings.townID;

	for(var county in taiwan){
		for(var town in taiwan[county]){
			if(taiwan[county][town][0] == userTownID){
				userTownLat = taiwan[county][town][1];
				userTownLon = taiwan[county][town][2];
				break;
			}
		}
	}

	drawLocation(userTownLat, userTownLon);
}

function playVoiceSound(playBuffer){
	var deferred = $.Deferred();

	if(playBuffer.length > 0){
		$("#audio-player-container audio").each(function(){
			$(this)[0].pause();
		});
		$("#audio-player-container").empty();

		for(var i = 0; i < playBuffer.length; i++){
			var $audio = $("<audio></audio>").append(
				$("<source/>").attr({
					"type": "audio/wav",
					"src": "audio/" + playBuffer[i] + ".wav"
				})
			).bind("ended", function(){
				var player = $(this).next("audio")[0];

				if(typeof(player) != "undefined"){
					player.play();
				}
				else{
					deferred.resolve();
				}
			}).appendTo("#audio-player-container");

			$audio[0].load();
		}

		$("#audio-player-container audio").first()[0].play();
	}
	else{
		deferred.resolve();
	}

	return deferred.promise();
}

function playUpdateSound(){
	$("#update-player").first()[0].play();
}

function run(epicenterLat, epicenterLon, epicenterDepth, originTime, magnitude){
	if(drawWaveThread !== null){
		// Stop draw wave thread
		clearTimeout(drawWaveThread);
		console.log("clearTimeout");
	}

	if(countdownThread !== null){
		// Stop countdwon thread
		clearTimeout(countdownThread);
		console.log("clearTimeout");
	}

	var information = fillIntensity(epicenterLat, epicenterLon, epicenterDepth, magnitude);
	drawWave(epicenterLat, epicenterLon, epicenterDepth, originTime, information.maxDistance, settings.showPWave);
	drawEpicenter(epicenterLat, epicenterLon);

	$("#year").text(originTime.getFullYear());
	$("#month").text(padding(originTime.getMonth() + 1, 2));
	$("#date").text(padding(originTime.getDate(), 2));
	$("#hour").text(padding(originTime.getHours(), 2));
	$("#minute").text(padding(originTime.getMinutes(), 2));
	$("#second").text(padding(originTime.getSeconds(), 2));
	$("#latitude").text(epicenterLat);
	$("#longitude").text(epicenterLon);
	$("#depth").text(epicenterDepth / 1000);
	$("#magnitude").text(magnitude);
	$("#intensity").text(information.userTownIntensity);
	$("#maxIntensity").text(information.maxIntensity);

	var alert = information.userTownIntensity >= settings.alertIntensity || warning;

	countdown(epicenterLat, epicenterLon, epicenterDepth, originTime, userTownLat, userTownLon, alert);

	if(alert == true){
		if(warning == false){
			warning = true;

			// Play voice
			$("#audio-player-container").attr("playing", "true");
			playVoiceSound(["alert", $("#intensity").text(), "intensity"]).then(function(){
				var eta = parseInt($("#eta").text(), 10);

				if(eta < 300){
					var temp = eta;
					var playBuffer = [];

					try{
						if(temp >= 100){
							playBuffer.push(Math.floor(temp / 100) + "xx");

							if(temp % 100 == 0){
								throw "";
							}

							if(Math.floor(temp / 10) % 10 == 0){
								playBuffer.push("0");
							}
							else if(Math.floor(temp / 10) % 10 == 1){
								playBuffer.push("1");
							}

							temp %= 100;
						}

						if(temp <= 9){// 0 ~ 9
							playBuffer.push(temp);
						}
						else if(temp >= 10 && temp <= 19){// 10 ~ 19
							playBuffer.push("x" + (temp % 10));
						}
						else if(temp >= 20 && temp <= 99){// 20 ~ 99
							playBuffer.push(Math.floor(temp / 10) + "x");
							playBuffer.push("x" + (temp % 10));
						}
					}
					catch(error){}

					playBuffer.push("second");
					return playVoiceSound(playBuffer);
				}
			}).always(function(){
				$("#audio-player-container").removeAttr("playing");
			});

			// Show window
			remote.getCurrentWindow().show();
			remote.getCurrentWindow().setAlwaysOnTop(true);
		}
		else{
			playUpdateSound();
		}
	}
}

function changeLightColor(color){
	$("#connection-light").removeClass("green red gray");
	$("#connection-light").addClass(color);
}

function initCountdown(){
	initCountdownThread = setTimeout(function(){
		var count = parseInt($("#connection-init-countdown").text(), 10) - 1;
		if(count > 0){
			$("#connection-init-countdown").text(count);
			initCountdown();
		}
		else{
			if(connectionStatus == false){
				$("#connection-init").hide();
				$("#connection-status").show();
				changeLightColor("red");
			}
		}
	}, 1000);
}

function padding(n, width, z) {
	z = z || '0';
	n = n + '';
	return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
}

function test(){
	var getRandomArbitrary = function(min, max) {
	    return Math.random() * (max - min) + min;
	};

	var epicenterLat = getRandomArbitrary(22.6, 24.8).toFixed(2);
	var epicenterLon = getRandomArbitrary(120.2, 121.7).toFixed(2);
	var epicenterDepth = getRandomArbitrary(5, 20).toFixed(1) * 1000;//in meters
	var originTime = new Date(Date.now() - (epicenterDepth / 3500 * 1000));
	var magnitude = getRandomArbitrary(4, 8).toFixed(1);

	now = function(){
		return Date.now();
	};

	run(epicenterLat, epicenterLon, epicenterDepth, originTime, magnitude);
}

function onload(){
	var svg = d3.select("#map");
	var width = svg.attr("width");
	var height = svg.attr("height");

//	var quantize = d3.scale.quantize()
	    //.domain([0, 2])
	    /*.range(d3.range(3).map(function(i) {
	        return "q" + (i) + "-9";
	    }))*/;

	projection = d3.geo.mercator/*equirectangular*/()
	    .center([122.0, 23.60])
	    .scale(8500)
		//.precision(.1)
	    .translate([width / 2, height / 2]);

	var path = d3.geo.path()
	    .projection(projection);

    d3.select("#towns")
        .selectAll("path")
		.data(topojson.feature(towns, towns.objects.map).features)
        .enter().append("path")
        .attr("id", function(d) {
			return "s" + d.id;
        })
        .attr("d", path)
        .attr("stroke-width", 1);

    d3.select("#counties")
        .selectAll("path")
		.data(topojson.feature(counties, counties.objects.map).features)
        .enter().append("path")
        .attr("d", path)
        .attr("stroke-width", 1.3);

	// Bind element event
	$("#top-bar .icons").hover(function(){
		$(this).addClass("hover");
	}, function(){
		$(this).removeClass("hover");
	});

	$("#top-bar .icons.update").bind("click", function(){
		ipcRenderer.send('create-update-window');
	});

	$("#top-bar .icons.setting").bind("click", function(){
		ipcRenderer.send('create-settings-window');
	});

	$("#top-bar .icons.minimize").bind("click", function(){
		$(this).trigger("mouseleave");
//		ipcRenderer.on('asynchronous-reply', (event, arg) => {
//			console.log(arg); // prints "pong"
//		});
//		ipcRenderer.send('asynchronous-message', 'ping');
		remote.getCurrentWindow().minimize(); 
	});

	$("#top-bar .icons.close").bind("click", function(){
		$(this).trigger("mouseleave");
		//remote.getCurrentWindow().close();
		remote.getCurrentWindow().hide();
	});

	// Bind ipc event
	ipcRenderer.on('focus', function(event, arg){
		$("body").removeClass("focus blur").addClass("focus");
	});

	ipcRenderer.on('blur', function(event, arg){
		$("body").removeClass("focus blur").addClass("blur");
	});

	ipcRenderer.on('connection-status-changed', function(event, port, server, peer){
		connectionStatus = port && server && peer;

		// Setup the fail description
		$("#connection-status div").hide();
		if(port == false){
			$("#connection-port").show();
		}
		else{
			if(server == false){
				$("#connection-server").show();
			}
			else{
				if(peer == false){
					$("#connection-peer").show();
				}
			}
		}

		if(connectionStatus == true){// Online
			changeLightColor("green");
			clearTimeout(initCountdownThread);
			$("#connection-information").hide();
		}
	});

	ipcRenderer.on('get-warning', function(event, message){
		var information = message.split(",");
		var originTime = new Date(Date.parse(information[0]));
		var epicenterLat = parseFloat(information[1]);
		var epicenterLon = parseFloat(information[2]);
		var epicenterDepth = parseFloat(information[3]) * 1000;//in meters
		var magnitude = parseFloat(information[4]);

		// Reference now to global now in main process, because test() will rewrite now reference
		now = remote.getGlobal('now');

		console.log(information);
		console.log(new Date(now()));

		run(epicenterLat, epicenterLon, epicenterDepth, originTime, magnitude);
	});

	ipcRenderer.on('update-downloaded', function(event){
		$("#top-bar .icons.update").show();
	});

	ipcRenderer.on('settings-changed', function(event){
		updateUserLocation();
	});

	ipcRenderer.on('connection-started', function(event){
		clearTimeout(initCountdownThread);
		changeLightColor("gray");
		$("#connection-information").show();
		$("#connection-init").show();
		$("#connection-init-countdown").text("14");
		$("#connection-status").hide();
		initCountdown();
	});

	// Reference settings to global settings in main process
	settings = remote.getGlobal('settings');

	// Force execute settings change function
	ipcRenderer.send('settings-changed');

	// All ready and start to recive data
	ipcRenderer.send('ready');
}
</script>
</head>
<body class="focus" onload="onload();">
	<div id="window">
		<div id="wrapper">
			<div id="top-bar">
				<div class="left">
					<div id="connection-light" class="gray"></div>
					<div id="connection-information">
						<div class="item" id="connection-init">
							<div>連線初始化中，請稍後(<span id="connection-init-countdown">14</span>)</div>
						</div>
						<div class="item" id="connection-status" style="display:none;">
							<div id="connection-port">連線失敗！UDP連接埠被佔用，請重新指定一組新的連接埠。</div>
							<div id="connection-server">連線失敗！請檢查您電腦的防火牆是否有阻擋本軟體的連線。</div>
							<div id="connection-peer">連線失敗！請確定您的網路環境可以進行點對點(P2P)的網路通訊。</div>
						</div>
						<div class="arrow"></div>
					</div>
				</div>

				<div class="center">
					<div class="title">地牛Wake Up!</div>
				</div>
				<div class="right">
					<span class="icons update" style="margin-right:10px;display:none;"></span>
					<span class="icons setting"></span>
					<div class="separation-line"></div>
					<span class="icons minimize" style="margin-right:10px;"></span>
					<span class="icons close"></span>
				</div>
				<div style="clear:both;"></div>
			</div>
			<div id="container">
				<svg id="map" width="900" height="700" style="float:left;">
					<g id="towns"></g>
					<g id="counties"></g>
				</svg>
				<svg id="mark" width="900" height="700" style="position:absolute;top:0;left:0;">
					<g id="location"></g>
					<g id="epicenter"></g>
					<g id="pWave"></g>
					<g id="sWave"></g>
				</svg>
				<div id="intensity-legend">
					<div><div class="color i7"></div><div class="text">7</div></div>
					<div><div class="color i6"></div><div class="text">6</div></div>
					<div><div class="color i5"></div><div class="text">5</div></div>
					<div><div class="color i4"></div><div class="text">4</div></div>
					<div><div class="color i3"></div><div class="text">3</div></div>
					<div><div class="color i2"></div><div class="text">2</div></div>
					<div><div class="color i1"></div><div class="text">1</div></div>
					<div><div class="color i0"></div><div class="text">0</div></div>
				</div>

				<div id="information">
					<div class="wrapper">
						<div class="title">震央</div>
						<div id="epicenter-table">
							<div class="row">
								<div class="header">時間</div>
								<div class="content"><span id="year">-</span>年<span id="month">-</span>月<span id="date">-</span>日<br><span id="hour">-</span>時<span id="minute">-</span>分<span id="second">-</span>秒</div>
							</div>
							<div class="row">
								<div class="header">位置</div>
								<div class="content">北緯 <span id="latitude">-</span>度<br>東經 <span id="longitude">-</span>度</div>
							</div>
							<div class="row">
								<div class="header">深度</div>
								<div class="content"><span id="depth">-</span>公里</div>
							</div>
							<div class="row">
								<div class="header">規模</div>
								<div class="content">芮氏<span id="magnitude">-</span></div>
							</div>
							<div class="row">
								<div class="header">最大震度</div>
								<div class="content"><span id="maxIntensity">-</span>級</div>
							</div>
						</div>

						<div class="title" style="margin-top:60px;">所在地</div>
						<div id="location-table">
							<div style="width:50%;float:left;box-sizing:border-box;border-right: 1px solid #cacaca;">
								<div class="location-table">
									<div class="header">震度</div>
									<div class="content" id="intensity">-</div>
									<div class="unit">級</div>
								</div>
							</div>
							<div style="width:50%;float:right;box-sizing:border-box;border-left: 1px solid #ffffff;">
								<div class="location-table">
									<div class="header">抵達</div>
									<div class="content" id="eta">-</div>
									<div class="unit">秒</div>
								</div>
							</div>
							<div style="clear:both;padding-bottom:10px;"></div>
						</div>
					</div>

					<div class="test-button-container" style="display:none;">
						<button id="test-button" onClick="test();">模擬</button>
					</div>
				</div>
			</div>
		</div>
	</div>

	<div style="display:none;">
		<div id="audio-player-container"></div>
		<audio id="update-player">
  			<source src="./audio/update.wav" type="audio/wav">
		</audio>
	</div>
</body>
</html>